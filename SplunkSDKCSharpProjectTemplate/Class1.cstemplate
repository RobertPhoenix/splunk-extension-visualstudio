using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Text;
using Splunk.Client; $if$ ($logging$ == tracelistener)
using System.Diagnostics;
using System.Net;
using Splunk.Logging; $endif$ $if$ ($logging$ == slab)
using System.Net;
using Microsoft.Practices.EnterpriseLibrary.SemanticLogging;
using Splunk.Logging;
using System.Diagnostics.Tracing;$endif$

// This is a template for new users of the Splunk SDK for C#.
// The code below connects to a Splunk instance, runs a search,
// and prints out the results in a crude form.
namespace $safeprojectname$
{
	public class Class1
	{
        static void Main(string[] args)
        {$if$ ($logging$ == tracelistener)
            TraceSource traceSource = ConfigureLogging(IPAddress.Loopback, 10000);
			traceSource.TraceEvent(TraceEventType.Information, 1, "Logging started.");
			$endif$ $if$ ($logging$ == slab)
			var listener = new ObservableEventListener();
            listener.Subscribe(new UdpEventSink(IPAddress.Loopback, 10000));
			
            var eventSource = new SimpleEventSource();
            listener.EnableEvents(eventSource, EventLevel.LogAlways, Keywords.All);

            eventSource.Message("Logging started.");
			$endif$ $if$ ($generateExampleImplementation$ == true)
            using (var service = new Service(Scheme.Https, "localhost", 8089))
            {
                Run(service).Wait();
            }$endif$
		}$if$ ($generateExampleImplementation$ == true)

        static async Task Run(Service service)
        {
            //// Login
            await service.LoginAsync("admin", "changeme");

            var query = "search index=_internal | head 5";
            var args = new JobArgs {
                	// For a full list of options, see:
	            	//
		            //     http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#POST_search.2Fjobs

		            EarliestTime = "now-1w",
                    LatestTime = "now"
            };

            using (SearchResultStream resultStream = await service.SearchOneshotAsync(query, args))
            {
                foreach (SearchResult result in resultStream)
                {
                    Console.WriteLine(result);
                }
            }
        }$endif$ $if$ ($logging$ == tracelistener)

        static TraceSource ConfigureLogging(IPAddress host, int port)
        {
            var traceSource = new TraceSource("TestLogger");

            traceSource.Listeners.Remove("Default");
            traceSource.Switch.Level = SourceLevels.All;
            traceSource.Listeners.Add(new UdpTraceListener(host, port));

            return traceSource;
        }$endif$ $if$ ($logging$ == slab)

		[EventSource(Name="TestEventSource")]
        public class SimpleEventSource : EventSource
        {
            public class Keywords {}
            public class Tasks {}

			[Event(1, Message = "{0}", Level = EventLevel.Informational)]
            internal void Message(string message)
            {
                this.WriteEvent(1, message);
            }
        }$endif$
	}
}
