<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="ZipFolder" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <FolderToCompress ParameterType="System.String" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[        
            const int BufferSize = 64 * 1024;

            var buffer = new byte[BufferSize];
            var fileMode = OverwriteExistingFile ? FileMode.Create : FileMode.CreateNew;

            Action<string, ZipArchive> addPathToZip = null;
            addPathToZip = new Action<string, ZipArchive>((string path, ZipArchive zip) =>
            {
                 if ((File.GetAttributes(path) & FileAttributes.Directory) == FileAttributes.Directory)
                 {
                     foreach (string p in Directory.GetFileSystemEntries(path))
                     {
                         addPathToZip(p, zip);
                     }
                 }
                 else // It's not a directory
                 {
                     var archivePath = path.Substring(FolderToCompress.TrimEnd('\\', '/').Count() + 1);
                     var archiveEntry = zip.CreateEntry(archivePath);
                     using (var fs = new FileStream(path, FileMode.Open))
                     using (var zipStream = archiveEntry.Open())
                     {
                         int bytesRead = -1;
                         while ((bytesRead = fs.Read(buffer, 0, BufferSize)) > 0)
                         {
                             zipStream.Write(buffer, 0, bytesRead);
                         }
                     }
                 };
             });

            using (var outputFileStream = new FileStream(OutputFileName, fileMode))
            using (var archive = new ZipArchive(outputFileStream, ZipArchiveMode.Create))
            {
                addPathToZip(FolderToCompress, archive);
            }    
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <PropertyGroup>
		<Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
		<Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
		<ProductVersion>8.0.30703</ProductVersion>
		<SchemaVersion>2.0</SchemaVersion>
		<ProjectGuid>$guid1$</ProjectGuid>
		<OutputType>Exe</OutputType>
		<AppDesignerFolder>Properties</AppDesignerFolder>
		<RootNamespace>$safeprojectname$</RootNamespace>
		<AssemblyName>$safeprojectname$</AssemblyName>
		<TargetFrameworkVersion>v$targetframeworkversion$</TargetFrameworkVersion>
		<FileAlignment>512</FileAlignment>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
		<DebugSymbols>true</DebugSymbols>
		<DebugType>full</DebugType>
		<Optimize>false</Optimize>
		<OutputPath>bin\Debug\</OutputPath>
		<DefineConstants>DEBUG;TRACE</DefineConstants>
		<ErrorReport>prompt</ErrorReport>
		<WarningLevel>4</WarningLevel>
	</PropertyGroup>
	<PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
		<DebugType>pdbonly</DebugType>
 		<Optimize>true</Optimize>
		<OutputPath>bin\Release\</OutputPath>
		<DefineConstants>TRACE</DefineConstants>
		<ErrorReport>prompt</ErrorReport>
		<WarningLevel>4</WarningLevel>
	</PropertyGroup>
  <PropertyGroup>
    <AppSkeletonPath>$(OutputPath)\app\</AppSkeletonPath>
  </PropertyGroup>
	<ItemGroup>
		<Reference Include="System"/>
		$if$ ($targetframeworkversion$ >= 3.5)
		<Reference Include="System.Core"/>
		<Reference Include="System.Xml.Linq"/>
		<Reference Include="System.Data.DataSetExtensions"/>
		$endif$
		$if$ ($targetframeworkversion$ >= 4.0)
		<Reference Include="Microsoft.CSharp"/>
 		$endif$
		<Reference Include="System.Data"/>
		<Reference Include="System.Xml"/>
	</ItemGroup>
	<ItemGroup>
		<Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="$safeprojectname$.cs" />
    <None Include="$safeprojectname$\**\*.*" />
	</ItemGroup>
	<Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target> -->
  <Target Name="AfterBuild">
    <!-- At this point, we have a directory AppSkeleton in the project directory that
         contains app.conf and inputs.conf.spec. -->

    <MakeDir Directories="$(AppSkeletonPath);$(AppSkeletonPath)\$safeprojectname$" />
    <MakeDir Directories="$(AppSkeletonPath)\$safeprojectname$\bin;$(AppSkeletonPath)\$safeprojectname$\default;$(AppSkeletonPath)\$safeprojectname$\README"/>
    <Copy SourceFiles="$(MSBuildProjectDirectory)\$safeprojectname$\default\app.conf" DestinationFolder="$(AppSkeletonPath)\$safeprojectname$\default"/>
    <Copy SourceFiles="$(MSBuildProjectDirectory)\$safeprojectname$\README\inputs.conf.spec" DestinationFolder="$(AppSkeletonPath)\$safeprojectname$\README"/>
    <Copy SourceFiles="$(OutputPath)\$safeprojectname$.exe" DestinationFolder="$(AppSkeletonPath)\$safeprojectname$\bin"/>
    <ItemGroup>
      <DLLsToInclude Include="$(OutputPath)\*.dll" />
    </ItemGroup>
    <Copy SourceFiles="@(DLLsToInclude)" DestinationFolder="$(AppSkeletonPath)\$safeprojectname$\bin" />
    <ZipFolder
      FolderToCompress="$(AppSkeletonPath)"
      OutputFileName="$(OutputPath)\$safeprojectname$.spl"
      OverwriteExistingFile="true" />
    <Message Importance="high" Text="Finished building .spl file in $(OutputPath)$safeprojectname$.spl"/>
  </Target>
  

 </Project>
